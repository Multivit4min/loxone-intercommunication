{"version":3,"sources":["../src/LoxoneServer.ts","../src/LoxoneRemoteSystem.ts","../src/packet/DataType.ts","../src/packet/LoxoneUDPPacket.ts","../src/packet/LoxoneIOPacket.ts","../src/packet/payload/Payload.ts","../src/packet/payload/AnalogPayload.ts","../src/packet/payload/BufferPayload.ts","../src/packet/payload/DigitalPayload.ts","../src/packet/payload/SmartActuatorSingleChannelPayload.ts","../src/packet/payload/SmartActuatorTunableWhitePayload.ts","../src/packet/payload/SmartRGBWPayload.ts","../src/packet/payload/T5Payload.ts","../src/packet/payload/TextPayload.ts","../src/packet/LoxoneOutput.ts","../src/output/Output.ts","../src/output/AnalogOutput.ts","../src/output/DigitalOutput.ts","../src/output/T5Output.ts","../src/output/TextOutput.ts","../src/output/SmartRGBWOutput.ts","../src/output/SmartActuatorSingleChannel.ts","../src/packet/LoxoneInput.ts"],"sourcesContent":["import dgram from \"dgram\"\nimport { EventEmitter } from \"stream\"\nimport { LoxoneUDPPacket } from \"./packet/LoxoneUDPPacket\"\nimport { LoxoneRemoteSystem } from \"./LoxoneRemoteSystem\"\nimport { LoxoneInput } from \"./packet/LoxoneInput\"\n\n\nexport interface LoxoneServer extends EventEmitter {\n  on(eventName: \"data\", listener: (props: LoxoneServer.DataEvent) => void): this\n  on(eventName: \"input\", listener: (props: LoxoneServer.InputEvent) => void): this\n  \n  emit(eventName: \"data\", props: LoxoneServer.DataEvent): boolean\n  /**\n   * receives inputs from the miniserver\n   * @param eventName \n   * @param props \n   */\n  emit(eventName: \"input\", props: LoxoneServer.InputEvent): boolean\n}\n\nexport class LoxoneServer extends EventEmitter {\n\n  readonly server = dgram.createSocket(\"udp4\")\n\n  constructor(readonly props: LoxoneServer.Props = {}) {\n    super()\n    this.server.on(\"message\", (buffer, rinfo) => {\n      const packet = LoxoneServer.packetFromBuffer(buffer)\n      if (!packet) return\n      this.emit(\"data\", { rinfo, packet })\n      if (packet instanceof LoxoneInput) this.emit(\"input\", { rinfo, packet })\n    })\n  }\n\n  /**\n   * ownId which is being sent to the miniserver for identification purposes\n   */\n  get ownId() {\n    return this.props.ownId || \"\"\n  }\n\n  /**\n   * creates a new remote system which sends inputs and\n   * receives output from a loxone server\n   * @param remoteId \n   * @returns \n   */\n  createRemoteSystem(props: Omit<LoxoneRemoteSystem.Props, \"server\">) {\n    return new LoxoneRemoteSystem({ ...props, server: this })\n  }\n\n  /**\n   * listens to the specified port and optional bind address\n   * @param port port to listen to\n   * @param address set the address to listen to, by default listens on all interfaces\n   * @returns \n   */\n  bind(port: number, address?: string) {\n    return new Promise<void>(resolve => {\n      this.server.bind(port, address, () => resolve())\n    })\n  }\n\n  /**\n   * identifies the packet and returns the correct class instance\n   * @param buffer \n   * @returns \n   */\n  static packetFromBuffer(buffer: Buffer): LoxoneUDPPacket|void {\n    const controlByte = buffer.readUInt8(0)\n    switch (controlByte) {\n      case 0x9e: return new LoxoneInput(buffer)\n      case 0x8d: return //not implemented\n      default: return console.debug(new Date(), buffer)\n    }\n  }\n\n}\n\nexport namespace LoxoneServer {\n\n  export type Props = {\n    //id of the server, leave empty if you want to listen to all incoming packets\n    ownId?: string\n  }\n\n  export type DataEvent = {\n    //udp remote info\n    rinfo: dgram.RemoteInfo\n    //packet instance\n    packet: LoxoneUDPPacket\n  }\n\n  export type InputEvent = {\n    //udp remote info\n    rinfo: dgram.RemoteInfo\n    //input data received from the miniserver\n    packet: LoxoneInput\n  }\n}","import { EventEmitter } from \"stream\"\nimport { LoxoneServer } from \"./LoxoneServer\"\nimport dgram, { Socket } from \"dgram\"\nimport { LoxoneOutput } from \"./packet/LoxoneOutput\"\nimport { Output } from \"./output/Output\"\nimport { DATA_TYPE } from \"./packet/DataType\"\nimport { AnalogOutput } from \"./output/AnalogOutput\"\nimport { DigitalOutput } from \"./output/DigitalOutput\"\nimport { T5Output } from \"./output/T5Output\"\nimport { TextOutput } from \"./output/TextOutput\"\nimport { SmartRGBWOutput } from \"./output/SmartRGBWOutput\"\nimport { SmartActuatorSingleChannelOutput } from \"./output/SmartActuatorSingleChannel\"\n\nexport class LoxoneRemoteSystem extends EventEmitter {\n\n  private socket: Socket\n  private outputs: Output[] = []\n  private connectedResolve: Promise<void>\n\n  constructor(readonly props: LoxoneRemoteSystem.Props) {\n    super()\n    this.socket = dgram.createSocket(\"udp4\")\n    this.connectedResolve = new Promise(resolve => {\n      this.socket.connect(this.props.port, this.props.address, resolve)\n    })\n  }\n\n  /**\n   * server instance the remote system belongs to\n   */\n  get server() {\n    return this.props.server\n  }\n\n  /**\n   * ownId which is being sent to the remote miniserver\n   */\n  get ownId() {\n    return this.server.ownId\n  }\n\n  /**\n   * remoteId which has been set on the remote miniserver\n   */\n  get remoteId() {\n    return this.props.remoteId\n  }\n\n  /**\n   * fetches the output with the given packetId\n   * if no packetId has been previously created and no type has been given it throws an error\n   * if no packetId has been previously created but a type has been set, then the output will be created\n   * @param packetId name of the packetId to identify it inside the loxone miniserver\n   * @param type the type of the packet\n   * @returns \n   */\n  get(packetId: string, type?: DATA_TYPE) {\n    const out = this.findOutput(packetId)\n    if (!out && type !== undefined) return this.createOutput(packetId, type)\n    if (!out) throw new Error(`could not find packetId \"${packetId}\"`)\n    return out\n  }\n\n  /**\n   * finds an output by the packetId in the output list\n   * @param packetId name to find\n   * @returns \n   */\n  private findOutput(packetId: string) {\n    return this.outputs.find(o => o.packetId === packetId)\n  }\n\n  /**\n   * creates a new output which is sendable to the miniserver\n   * @param packetId name of the output\n   * @param type type of the output\n   */\n  createOutput(packetId: string, type: DATA_TYPE.DIGITAL): DigitalOutput\n  createOutput(packetId: string, type: DATA_TYPE.ANALOG): AnalogOutput\n  createOutput(packetId: string, type: DATA_TYPE.TEXT): TextOutput\n  createOutput(packetId: string, type: DATA_TYPE.T5): T5Output\n  createOutput(packetId: string, type: DATA_TYPE.SmartActuatorRGBW): SmartRGBWOutput\n  createOutput(packetId: string, type: DATA_TYPE.SmartActuatorSingleChannel): SmartActuatorSingleChannelOutput\n  createOutput(packetId: string, type: DATA_TYPE.T5): T5Output\n  createOutput(packetId: string, type: DATA_TYPE): Output\n  createOutput(packetId: string, type: DATA_TYPE) {\n    let output = this.findOutput(packetId)\n    if (output) throw new Error(`output with name ${packetId} already exists`)\n    output = this.createOutputInstance(packetId, type)\n    this.outputs.push(output)\n    return output\n  }\n\n  /**\n   * creates the instance object of the output\n   * @param packetId name of the output\n   * @param type type of the output\n   * @returns \n   */\n  private createOutputInstance(packetId: string, type: DATA_TYPE) {\n    switch (type) {\n      case DATA_TYPE.DIGITAL: return new DigitalOutput({ packetId, remoteSystem: this })\n      case DATA_TYPE.ANALOG: return new AnalogOutput({ packetId, remoteSystem: this })\n      case DATA_TYPE.TEXT: return new TextOutput({ packetId, remoteSystem: this })\n      case DATA_TYPE.T5: return new T5Output({ packetId, remoteSystem: this })\n      case DATA_TYPE.SmartActuatorRGBW: return new SmartRGBWOutput({ packetId, remoteSystem: this })\n      case DATA_TYPE.SmartActuatorSingleChannel: return new SmartActuatorSingleChannelOutput({ packetId, remoteSystem: this })\n      default: throw new Error(`can not create output ${type} is not implemented`)\n    }\n  }\n\n  /**\n   * sends the output to the miniserver\n   * @param output \n   */\n  send(output: Output) {\n    const typeData = LoxoneOutput.getTypeDataFromValue(output.getValue())\n    const packet = new LoxoneOutput({\n      remoteSystem: this,\n      packetId: output.packetId,\n      ...typeData\n    })\n    this.sendBuffer(packet.toBuffer()) \n  }\n\n  /**\n   * sends the buffer to the miniserver\n   * @param buffer \n   * @returns \n   */\n  private async sendBuffer(buffer: Buffer) {\n    await this.connectedResolve\n    return this.socket.send(buffer)\n  }\n\n\n}\n\nexport namespace LoxoneRemoteSystem {\n  export type Props = {\n    //id of the remote loxone server which has been set inside Loxone Config under\n    //MiniServer > Netowrk Intercommunication > Own ID\n    remoteId: string\n    //network address to reach the remote server\n    address: string\n    //network port to reach the remote server\n    port: number\n    server: LoxoneServer\n  }\n\n  export type SendValue = number|boolean|string\n}","export enum DATA_TYPE {\n  DIGITAL = 0x00,\n  ANALOG = 0x01,\n  TEXT = 0x02,\n  T5 = 0x03,\n  SmartActuatorRGBW = 0x04,\n  SmartActuatorSingleChannel = 0x05,\n  SmartActuatorTunableWhite = 0x06\n}","export abstract class LoxoneUDPPacket {\n\n  abstract get controlByte(): number\n\n\n}","import { LoxoneUDPPacket } from \"./LoxoneUDPPacket\"\n\nexport class LoxoneIOPacket extends LoxoneUDPPacket {\n\n  get controlByte() {\n    return 0x9e\n  }\n\n}\n","export abstract class Payload {\n\n  constructor(readonly buffer: Buffer) {}\n\n  abstract get value(): any\n  \n  get byteLength() {\n    return this.buffer.byteLength\n  }\n}","import { Payload } from \"./Payload\"\n\nexport class AnalogPayload extends Payload {\n\n  get value() {\n    return this.buffer.readDoubleLE(0)\n  }\n\n  static bufferFromValue(value: number) {\n    const buffer = Buffer.alloc(8)\n    buffer.writeDoubleLE(value)\n    return buffer\n  }\n\n}","import { Payload } from \"./Payload\"\n\nexport class BufferPayload extends Payload {\n\n  get value() {\n    return this.buffer\n  }\n\n}","import { Payload } from \"./Payload\"\n\nexport class DigitalPayload extends Payload {\n\n  get value() {\n    return Boolean(this.buffer.readUInt8(0))\n  }\n\n  static bufferFromValue(value: boolean) {\n    const buffer = Buffer.alloc(1)\n    buffer.writeUint8(value ? 1 : 0)\n    return buffer\n  }\n}","import { Payload } from \"./Payload\"\n\nexport class SmartActuatorSingleChannelPayload extends Payload {\n\n  get channel() {\n    return this.buffer.readUint8(3)\n  }\n\n  get fadeTime() {\n    return this.buffer.readUint16LE(4)\n  }\n\n  get value(): SmartActuatorSingleChannelPayload.Type {\n    return {\n      channel: this.channel,\n      fadeTime: this.fadeTime\n    }\n  }\n\n  static bufferFromValue(data: SmartActuatorSingleChannelPayload.Type) {\n    const buffer = Buffer.alloc(8)\n    buffer.writeUint8(data.channel, 3)\n    buffer.writeUint16LE(data.fadeTime, 4)\n    return buffer\n  }\n}\n\nexport namespace SmartActuatorSingleChannelPayload {\n\n  export type Type = {\n    channel: number\n    fadeTime: number\n  }\n\n}\n\n/*\n00 01 02 03 04 05 06 07\n00 00 00 5a 02 00 00 00\nR  G  B  W  FADE  BITS\n\nValues 0x00-0x64\n\n0: R\n1: G\n2: B\n3: W\n4: CHANGE TIME\n5: CHANGE TIME\n6: CONTROL BITS?\n7: CONTROL BITS?\n*/","import { Payload } from \"./Payload\"\n\n//@todo\nexport class SmartActuatorTunableWhitePayload extends Payload {\n\n  get value() {\n    return this.buffer\n  }\n\n  static bufferFromValue(data: Buffer) {\n    const buffer = Buffer.alloc(8)\n    data.copy(buffer, 0, 0, 8)\n    return buffer\n  }\n}","import { Payload } from \"./Payload\"\n\nexport class SmartRGBWPayload extends Payload {\n\n  get red() {\n    return this.buffer.readUint8(0)\n  }\n\n  get green() {\n    return this.buffer.readUint8(1)\n  }\n\n  get blue() {\n    return this.buffer.readUint8(2)\n  }\n\n  get white() {\n    return this.buffer.readUint8(3)\n  }\n\n  get fadeTime() {\n    return this.buffer.readUint16LE(4)\n  }\n\n  get bits() {\n    return this.buffer.readUint16LE(6)\n  }\n\n  get value(): SmartRGBWPayload.Type {\n    return {\n      red: this.red,\n      green: this.green,\n      blue: this.blue,\n      white: this.white,\n      fadeTime: this.fadeTime,\n      bits: this.bits\n    }\n  }\n\n  static bufferFromValue(data: SmartRGBWPayload.Type) {\n    const buffer = Buffer.alloc(8)\n    buffer.writeUint8(data.red, 0)\n    buffer.writeUint8(data.green, 1)\n    buffer.writeUint8(data.blue, 2)\n    buffer.writeUint8(data.white, 3)\n    buffer.writeUint16LE(data.fadeTime, 4)\n    buffer.writeUint16LE(data.bits || 0, 6)\n    return buffer\n  }\n}\n\nexport namespace SmartRGBWPayload {\n\n  export type Type = {\n    red: number\n    green: number\n    blue: number\n    white: number\n    fadeTime: number\n    bits?: number\n  }\n\n}\n\n/*\n00 01 02 03 04 05 06 07\n00 00 00 5a 02 00 00 00\nR  G  B  W  FADE  BITS\n\nValues 0x00-0x64\n\n0: R\n1: G\n2: B\n3: W\n4: CHANGE TIME\n5: CHANGE TIME\n6: CONTROL BITS?\n7: CONTROL BITS?\n*/","import { Payload } from \"./Payload\"\n\nexport class T5Payload extends Payload {\n\n  get value(): T5Payload.Type {\n    return {\n      button: this.buffer.readUint16LE(6)\n    }\n  }\n\n  static bufferFromValue({ button }: T5Payload.Type) {\n    const buffer = Buffer.alloc(8)\n    buffer.writeUint16LE(button, 6)\n    return buffer\n  }\n}\n\nexport namespace T5Payload {\n\n  export type Type = {\n    button: ButtonPressed\n  }\n\n  export enum ButtonPressed {\n    NONE = 0,\n    MIDDLE = 16400,\n    LEFT_UPPER = 16368,\n    LEFT_LOWER = 16416,\n    RIGHT_UPPER = 16384,\n    RIGHT_LOWER = 16432\n  }\n\n}","import { Payload } from \"./Payload\"\n\nexport class TextPayload extends Payload {\n\n  get value() {\n    return this.buffer.toString(\"utf8\", 0, this.byteLength - 1)\n  }\n\n  static bufferFromValue(value: string) {\n    return Buffer.concat([Buffer.from(value, \"utf8\"), Buffer.from([0x00])])\n  }\n\n}","import { LoxoneRemoteSystem } from \"../LoxoneRemoteSystem\"\nimport { DATA_TYPE } from \"./DataType\"\nimport { LoxoneIOPacket } from \"./LoxoneIOPacket\"\nimport { AnalogPayload } from \"./payload/AnalogPayload\"\nimport { BufferPayload } from \"./payload/BufferPayload\"\nimport { DigitalPayload } from \"./payload/DigitalPayload\"\nimport { Payload } from \"./payload/Payload\"\nimport { SmartActuatorSingleChannelPayload } from \"./payload/SmartActuatorSingleChannelPayload\"\nimport { SmartActuatorTunableWhitePayload } from \"./payload/SmartActuatorTunableWhitePayload\"\nimport { SmartRGBWPayload } from \"./payload/SmartRGBWPayload\"\nimport { T5Payload } from \"./payload/T5Payload\"\nimport { TextPayload } from \"./payload/TextPayload\"\n\nexport class LoxoneOutput extends LoxoneIOPacket {\n\n  private _payload?: Payload\n  sourceId: string\n  targetId: string\n  packetId: string\n  type: DATA_TYPE\n  payloadBuffer: Buffer\n\n  constructor(readonly props: LoxoneOutput.Props) {\n    super()\n    this.payloadBuffer = LoxoneOutput.createPayloadBuffer(props)\n    this.sourceId = props.remoteSystem.ownId\n    this.targetId = props.remoteSystem.remoteId\n    this.packetId = props.packetId\n    this.type = props.type\n}\n\n  get payloadLength() {\n    return this.payloadBuffer.byteLength\n  }\n\n  get payload() {\n    if (!this._payload) this._payload = this.createPayload()\n    return this._payload\n  }\n\n  toBuffer() {\n    const buffer = Buffer.alloc(38)\n    buffer.writeUint8(0x9e)\n    Buffer.from(this.sourceId, \"utf8\").copy(buffer, 8, 0, 8)\n    Buffer.from(this.targetId, \"utf8\").copy(buffer, 17, 0, 8)\n    Buffer.from(this.packetId, \"utf8\").copy(buffer, 26, 0, 8)\n    buffer.writeUint8(this.payloadLength, 35)\n    buffer.writeUint8(this.type, 37)\n    return Buffer.concat([buffer, this.payloadBuffer])\n  }\n\n  private createPayload() {\n    switch (this.type) {\n      case DATA_TYPE.ANALOG: return new AnalogPayload(this.payloadBuffer)\n      case DATA_TYPE.DIGITAL: return new DigitalPayload(this.payloadBuffer)\n      case DATA_TYPE.TEXT: return new TextPayload(this.payloadBuffer)\n      case DATA_TYPE.T5: return new T5Payload(this.payloadBuffer)\n      case DATA_TYPE.SmartActuatorRGBW: return new SmartRGBWPayload(this.payloadBuffer)\n      case DATA_TYPE.SmartActuatorSingleChannel: return new SmartActuatorSingleChannelPayload(this.payloadBuffer)\n      case DATA_TYPE.SmartActuatorTunableWhite: return new SmartActuatorTunableWhitePayload(this.payloadBuffer)\n      default: return new BufferPayload(this.payloadBuffer)\n    }\n  }\n\n  static createPayloadBuffer({ type, value }: LoxoneOutput.PayloadDataType) {\n    switch (type) {\n      case DATA_TYPE.ANALOG: return AnalogPayload.bufferFromValue(value)\n      case DATA_TYPE.DIGITAL: return DigitalPayload.bufferFromValue(value)\n      case DATA_TYPE.TEXT: return TextPayload.bufferFromValue(value)\n      case DATA_TYPE.T5: return T5Payload.bufferFromValue(value)\n      case DATA_TYPE.SmartActuatorRGBW: return SmartRGBWPayload.bufferFromValue(value)\n      case DATA_TYPE.SmartActuatorSingleChannel: return SmartActuatorSingleChannelPayload.bufferFromValue(value)\n      case DATA_TYPE.SmartActuatorTunableWhite: return SmartActuatorTunableWhitePayload.bufferFromValue(value)\n      default: throw new Error(`data type ${type} is not implemented`)\n    }\n  }\n\n  static getTypeDataFromValue(value: LoxoneOutput.TypeFromValue): LoxoneOutput.PayloadDataType {\n    switch(typeof value) {\n      case \"string\": return { type: DATA_TYPE.TEXT, value }\n      case \"number\": return { type: DATA_TYPE.ANALOG, value }\n      case \"boolean\": return { type: DATA_TYPE.DIGITAL, value }\n      case \"object\":\n        const v = <any>value\n        if (v instanceof Buffer) {\n          return { type: DATA_TYPE.SmartActuatorTunableWhite, value: v }\n        } else if (!isNaN(v[\"button\"])) {\n          return { type: DATA_TYPE.T5, value: v }\n        } else if (!isNaN(v[\"red\"]) && !isNaN(v[\"green\"]) && !isNaN(v[\"blue\"]) && !isNaN(v[\"white\"])) {\n          return { type: DATA_TYPE.SmartActuatorRGBW, value: v }\n        } else if (v[\"channel\"]) {\n          return { type: DATA_TYPE.SmartActuatorSingleChannel, value: v }\n        }\n      default: throw new Error(`unknown value type: ${typeof value}`)\n    }\n  }\n\n}\n\nexport namespace LoxoneOutput {\n\n  export type Props = {\n    remoteSystem: LoxoneRemoteSystem\n    packetId: string\n  } & PayloadDataType\n\n  \n  export type TypeFromValue = \n    number |\n    boolean |\n    string |\n    T5Payload.Type |\n    SmartRGBWPayload.Type |\n    SmartActuatorSingleChannelPayload.Type |\n    Buffer\n\n  export type PayloadDataType = {\n    type: DATA_TYPE.ANALOG\n    value: number\n  } | {\n    type: DATA_TYPE.DIGITAL\n    value: boolean\n  } | {\n    type: DATA_TYPE.TEXT\n    value: string\n  } | {\n    type: DATA_TYPE.T5\n    value: T5Payload.Type\n  } | {\n    type: DATA_TYPE.SmartActuatorRGBW\n    value: SmartRGBWPayload.Type\n  } | {\n    type: DATA_TYPE.SmartActuatorSingleChannel\n    value: SmartActuatorSingleChannelPayload.Type\n  } | {\n    type: DATA_TYPE.SmartActuatorTunableWhite\n    value: Buffer\n  }\n\n}","import { LoxoneRemoteSystem } from \"../LoxoneRemoteSystem\"\nimport { LoxoneOutput } from \"../packet/LoxoneOutput\"\n\nexport abstract class Output {\n\n  private _interval?: NodeJS.Timeout\n  private _updateInterval: number = 10 * 1000\n\n  constructor(readonly props: Output.Props) {\n    this.updateInterval()\n  }\n\n  protected get remoteSystem() {\n    return this.props.remoteSystem\n  }\n\n  abstract setValue(value: LoxoneOutput.TypeFromValue): this\n  abstract getValue(): LoxoneOutput.TypeFromValue\n\n  get packetId() {\n    return this.props.packetId\n  }\n\n  private updateInterval() {\n    clearInterval(this._interval)\n    this._interval = setInterval(() => this.send(), this._updateInterval)\n  }\n\n  setInterval(time: number) {\n    this._updateInterval = time\n    this.updateInterval()\n    return this\n  }\n\n  send() {\n    this.updateInterval()\n    return this.remoteSystem.send(this)\n  }\n\n}\n\nexport namespace Output {\n\n  export type Props = {\n    remoteSystem: LoxoneRemoteSystem\n    packetId: string\n  }\n\n}","import { Output } from \"./Output\"\n\nexport class AnalogOutput extends Output {\n\n  private value: number = 0\n\n  setValue(value: number) {\n    this.value = value\n    this.send()\n    return this\n  }\n\n  getValue() {\n    return this.value\n  }\n\n}","import { Output } from \"./Output\"\n\nexport class DigitalOutput extends Output {\n\n  private value: boolean = false\n\n  setValue(value: boolean) {\n    this.value = Boolean(value)\n    this.send()\n    return this\n  }\n\n  getValue() {\n    return Boolean(this.value)\n  }\n\n}","import { T5Payload } from \"../packet/payload/T5Payload\"\nimport { Output } from \"./Output\"\n\nexport class T5Output extends Output {\n\n  private value: T5Payload.Type = { button: T5Payload.ButtonPressed.NONE }\n\n  setValue(button: T5Payload.ButtonPressed) {\n    this.value = { button }\n    this.send()\n    return this\n  }\n\n  getValue() {\n    return this.value\n  }\n\n}","import { Output } from \"./Output\"\n\nexport class TextOutput extends Output {\n\n  private value: string = \"\"\n\n  setValue(value: string) {\n    this.value = value\n    this.send()\n    return this\n  }\n\n  getValue() {\n    return this.value\n  }\n\n}","import { SmartRGBWPayload } from \"../packet/payload/SmartRGBWPayload\"\nimport { Output } from \"./Output\"\n\nexport class SmartRGBWOutput extends Output {\n\n  private value: SmartRGBWPayload.Type = {\n    red: 0,\n    green: 0,\n    blue: 0,\n    white: 0,\n    fadeTime: 0.2,\n    bits: 0\n  }\n\n  setPartial(props: Partial<SmartRGBWPayload.Type>) {\n    this.setValue({ ...this.value, ...props })\n    return this\n  }\n\n  setValue(props: SmartRGBWPayload.Type) {\n    this.value = { ...props }\n    this.send()\n    return this\n  }\n\n  getValue() {\n    return this.value\n  }\n\n}","import { SmartActuatorSingleChannelPayload } from \"../packet/payload/SmartActuatorSingleChannelPayload\"\nimport { Output } from \"./Output\"\n\nexport class SmartActuatorSingleChannelOutput extends Output {\n\n  private value: SmartActuatorSingleChannelPayload.Type = {\n    channel: 0,\n    fadeTime: 0.2\n  }\n\n  setPartial(props: Partial<SmartActuatorSingleChannelPayload.Type>) {\n    this.setValue({ ...this.value, ...props })\n    return this\n  }\n\n  setValue(props: SmartActuatorSingleChannelPayload.Type) {\n    this.value = { ...props }\n    this.send()\n    return this\n  }\n\n  getValue() {\n    return this.value\n  }\n\n}","import { DATA_TYPE } from \"./DataType\"\nimport { LoxoneIOPacket } from \"./LoxoneIOPacket\"\nimport { AnalogPayload } from \"./payload/AnalogPayload\"\nimport { BufferPayload } from \"./payload/BufferPayload\"\nimport { DigitalPayload } from \"./payload/DigitalPayload\"\nimport { Payload } from \"./payload/Payload\"\nimport { SmartActuatorSingleChannelPayload } from \"./payload/SmartActuatorSingleChannelPayload\"\nimport { SmartActuatorTunableWhitePayload } from \"./payload/SmartActuatorTunableWhitePayload\"\nimport { SmartRGBWPayload } from \"./payload/SmartRGBWPayload\"\nimport { T5Payload } from \"./payload/T5Payload\"\nimport { TextPayload } from \"./payload/TextPayload\"\n\nexport class LoxoneInput extends LoxoneIOPacket {\n\n  private _payload?: Payload\n\n  constructor(readonly buffer: Buffer) {\n    super()\n  }\n\n  get sourceId() {\n    return this.buffer.subarray(8, 16).toString(\"utf8\").replace(/\\x00/g, \"\")\n  }\n\n  get targetId() {\n    return this.buffer.subarray(17, 25).toString(\"utf8\").replace(/\\x00/g, \"\")\n  }\n\n  get packetId() {\n    return this.buffer.subarray(26, 34).toString(\"utf8\").replace(/\\x00/g, \"\")\n  }\n\n  get payloadLength() {\n    return this.buffer.readUint16LE(35)\n  }\n\n  get type() {\n    return this.buffer.readUInt8(37)\n  }\n\n  private get payloadBuffer() {\n    return this.buffer.subarray(38, 38 + this.payloadLength)\n  }\n\n  get payload() {\n    if (!this._payload) this._payload = this.createPayload()\n    return this._payload\n  }\n\n  toBuffer() {\n    const buffer = Buffer.alloc(38)\n    buffer.writeUint8(0x9e)\n    Buffer.from(this.sourceId, \"utf8\").copy(buffer, 8, 0, 8)\n    Buffer.from(this.targetId, \"utf8\").copy(buffer, 17, 0, 8)\n    Buffer.from(this.packetId, \"utf8\").copy(buffer, 26, 0, 8)\n    buffer.writeUint8(this.payloadLength, 35)\n    buffer.writeUint8(this.type, 37)\n    return Buffer.concat([buffer, this.payloadBuffer])\n  }\n\n  private createPayload() {\n    switch (this.type) {\n      case DATA_TYPE.ANALOG: return new AnalogPayload(this.payloadBuffer)\n      case DATA_TYPE.DIGITAL: return new DigitalPayload(this.payloadBuffer)\n      case DATA_TYPE.TEXT: return new TextPayload(this.payloadBuffer)\n      case DATA_TYPE.T5: return new T5Payload(this.payloadBuffer)\n      case DATA_TYPE.SmartActuatorRGBW: return new SmartRGBWPayload(this.payloadBuffer)\n      case DATA_TYPE.SmartActuatorSingleChannel: return new SmartActuatorSingleChannelPayload(this.payloadBuffer)\n      case DATA_TYPE.SmartActuatorTunableWhite: return new SmartActuatorTunableWhitePayload(this.payloadBuffer)\n      default: return new BufferPayload(this.payloadBuffer)\n    }\n  }\n\n}"],"mappings":"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","names":["dgram","EventEmitter","DATA_TYPE","T5Payload","ButtonPressed","EventEmitter","dgram"]}